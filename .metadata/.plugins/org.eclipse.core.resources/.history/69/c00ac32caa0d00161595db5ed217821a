package libsys;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

public class DatabaseController {
	
	/**
	 * This class assumes tables in SQL database
	 * created with the following commands:
	 * 
	 * CREATE TABLE Accounts
	 * (
	 * Username VARCHAR(100),
	 * Password VARCHAR(100),
	 * Type TINYINT,
	 * CurrentBookTitle VARCHAR(100),
	 * CurrentBookAuthor VARCHAR(100),
	 * );
	 * 
	 * CREATE TABLE Books
	 * (
	 * Title VARCHAR(100),
	 * Author VARCHAR(100),
	 * Genre VARCHAR(100),
	 * ISBN VARCHAR(100),
	 * ShelfID INT,
	 * Status TINYINT,
	 * CurrentCustomer VARCHAR(100)
	 * );
	 * 
	 * CREATE TABLE Shelves
	 * (
	 * ShelfID INT,
	 * Genre VARCHAR(100),
	 * Capacity INT
	 * );
	 * 
	 * CREATE TABLE Request
	 * (
	 * Customer VARCHAR(100),
	 * BookTitle VARCHAR(100),
	 * BookAuthor VARCHAR(100),
	 * Status TINYINT
	 * );
	 * 
	 */
	
	Connection conn;
	
	public DatabaseController(){
		this.conn = createConnection();
	}
	
	/**
	 * Puts the Account into the database.
	 * 
	 * @param a The Account to be placed into the database.
	 * @return true if the Account is successfully entered, false if not
	 */
	public boolean putAccount(Account a) {
		try {
			Statement stmt = conn.createStatement();
			ResultSet user = stmt.executeQuery("SELECT COUNT(*) FROM Accounts WHERE Username='" + a.getUsername() + "'");
			user.next();
			int count = user.getInt("COUNT(*)");
			if(count == 0){
				if(a.getCurrentBook() != null) {
					Statement stmt2 = conn.createStatement();
					stmt2.executeUpdate("INSERT INTO Accounts VALUES ('" + a.getUsername() + "','" + a.getPassword() + "','" + a.getType() + "','" + a.getCurrentBook().getTitle() + "','" + "','" + a.getCurrentBook().getAuthor() + "')");
				}
				else {
					Statement stmt2 = conn.createStatement();
					stmt2.executeUpdate("INSERT INTO Accounts (Username, Password, Type) VALUES ('" + a.getUsername() + "','" + a.getPassword() + "','" + a.getType() + "')");
				}
			}
			else {
				if(a.getCurrentBook() != null) {
					Statement stmt2 = conn.createStatement();
					stmt2.executeUpdate("UPDATE Accounts SET Username='" + a.getUsername() + "', Password='" + a.getPassword() + "', Type='" + a.getType() + "', CurrentBookTitle='" + a.getCurrentBook().getTitle() + "' CurrentBookAuthor='" + a.getCurrentBook().getAuthor() + "' WHERE Username='" + a.getUsername() + "'");
				}
				else {
					Statement stmt2 = conn.createStatement();
					stmt2.executeUpdate("UPDATE Accounts SET Username='" + a.getUsername() + "', Password='" + a.getPassword() + "', Type='" + a.getType() + "' WHERE Username='" + a.getUsername() + "'");
				}
			}
			
			return true;
		}
		catch(SQLException e) {
			return false;
		}
	}
	
	/**
	 * Gets a list of all Accounts in the system.
	 * 
	 * @return a list of all the Accounts in the system
	 */
	public List<Account> listUsers() {
		//TODO
		try {
			List<Account> userList = new ArrayList<Account>();
			Statement stmt = conn.createStatement();
			ResultSet users = stmt.executeQuery("SELECT * FROM Accounts");
			while(users.next()) {
				if(users.getString("CurrentBookTitle") != null && users.getString("CurrentBookAuthor") != null) {
					Book b = getBook(users.getString("CurrentBookTitle"),users.getString("CurrentBookAuthor"));
				}
			}
			return userList;
		}
		catch(SQLException e) {
			return null;
		}
	}
	
	/**
	 * Gets the Account object from the database that has the given username.
	 * 
	 * @param username the username of the Account to be retrieved
	 * @return the Account in the database with the given username
	 */
	public Account getAccount(String username) {
		//TODO
		return null;
	}
	
	/**
	 * Removes the book with the given title and author from the database
	 * 
	 * @param title the title of the book to be removed
	 * @param author the author of the book to be removed
	 * @return true if the book has been successfully removed, false if not
	 */
	public boolean removeBook(String title, String author) {
		//TODO
		return false;
	}
	
	/**
	 * Puts the given Shelf object into the database
	 * 
	 * @param s the shelf to be inserted into the database
	 * @return true if the shelf has been successfully put into the database, false if not
	 */
	public boolean putShelf(Shelf s) {
		//TODO
		return false;
	}
	
	/**
	 * Puts the given Book object into the database
	 * 
	 * @param b the Book object to be put into the database
	 * @return true if the book has been successfully put into the database, false if not
	 */
	public boolean putBook(Book b) {
		//TODO
		return false;
	}
	
	/**
	 * Gets from the database the shelf with the given ID number
	 * 
	 * @param sid the ID number of the Shelf object to be gotten from the database
	 * @return the Shelf object with the given ID number
	 */
	public Shelf getShelf(int sid) {
		//TODO
		return null;
	}
	
	public Book getBook(String title, String author) {
		//TODO
		return null;
	}
	
	public List<Shelf> getAllShelves() {
		//TODO
		return null;
	}
	
	public List<Book> listLibraryBooks() {
		//TODO
		return null;
	}
	
	public List<Book> listCatalogBooks() {
		//TODO
		return null;
	}
	
	public boolean putRequest(Request r) {
		//TODO
		return false;
	}
	
	public Request getRequest(int rid) {
		//TODO
		return null;
	}
	
	public List<Request> viewRequests() {
		//TODO
		return null;
	}
	
	public List<Book> getCheckouts() {
		//TODO
		return null;
	}
	
	private Connection createConnection() {
		try {
			Class.forName("com.mysql.jdbc.Driver");
		}
		catch(Exception e){
			e.printStackTrace();
		}
		
		Connection conn = null;
		String dbUrl = "jdbc:mysql://173.17.63.77:3306/Library_db";
		String user = "team7";
		String password = "^h;>8jp.";
		try {
			conn = DriverManager.getConnection(dbUrl, user, password);
		}
		catch(SQLException e) {
			e.printStackTrace();
		}
		finally {
			return conn;
		}
	}
	
}
